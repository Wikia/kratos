name: Docker Image Scanners
on:
  push:
    branches:
      - "master"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "master"

jobs:
  scanners:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Env
        id: vars
        shell: bash
        run: |
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> "${GITHUB_ENV}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55
      - name: Build images
        shell: bash
        run: |
          IMAGE_TAG="${{ env.SHA_SHORT }}" make docker
      - name: Anchore Scanner
        uses: anchore/scan-action@3343887d815d7b07465f6fdcd395bd66508d486a
        id: grype-scan
        with:
          image: oryd/kratos:${{ env.SHA_SHORT }}
          fail-build: true
          severity-cutoff: high
          add-cpes-if-none: true
      - name: Inspect action SARIF report
        shell: bash
        if: ${{ always() }}
        run: |
          echo "::group::Anchore Scan Details"
          jq '.runs[0].results' ${{ steps.grype-scan.outputs.sarif }}
          echo "::endgroup::"
      - name: Anchore upload scan SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@b8d3b6e8af63cde30bdc382c0bc28114f4346c88
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}
      #      - name: Kubescape scanner
      #        uses: kubescape/github-action@main
      #        id: kubescape
      #        with:
      #          verbose: true
      #          format: pretty-printer
      #          # can't whitelist CVE yet: https://github.com/kubescape/kubescape/pull/1568
      #          image: oryd/kratos:${{ env.SHA_SHORT }}
      #          severityThreshold: critical
      - name: Trivy Scanner
        uses: aquasecurity/trivy-action@76071ef0d7ec797419534a183b498b4d6366cf37
        if: ${{ always() }}
        with:
          image-ref: oryd/kratos:${{ env.SHA_SHORT }}
          format: "table"
          exit-code: "42"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          scanners: "vuln,secret,config"
      - name: Dockle Linter
        uses: erzz/dockle-action@5dea2a0164fd32b38ceef8c8873868bb66b9e395
        if: ${{ always() }}
        with:
          image: oryd/kratos:${{ env.SHA_SHORT }}
          exit-code: 42
          failure-threshold: high
      - name: Hadolint
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf
        id: hadolint
        if: ${{ always() }}
        with:
          dockerfile: .docker/Dockerfile-build
          verbose: true
          format: "json"
          failure-threshold: "error"
      - name: View Hadolint results
        if: ${{ always() }}
        shell: bash
        run: |
          echo "::group::Hadolint Scan Details"
          echo "${HADOLINT_RESULTS}" | jq '.'
          echo "::endgroup::"
