/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more.
 *
 * API version:
 * Contact: office@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SuccessfulAdminIdentitySession struct for SuccessfulAdminIdentitySession
type SuccessfulAdminIdentitySession struct {
	Identity Identity `json:"identity"`
	Session  Session  `json:"session"`
	// The Session Token  This field is only set when the session hook is configured as a post-registration hook.  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!
	SessionToken *string `json:"session_token,omitempty"`
}

// NewSuccessfulAdminIdentitySession instantiates a new SuccessfulAdminIdentitySession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuccessfulAdminIdentitySession(identity Identity, session Session) *SuccessfulAdminIdentitySession {
	this := SuccessfulAdminIdentitySession{}
	this.Identity = identity
	this.Session = session
	return &this
}

// NewSuccessfulAdminIdentitySessionWithDefaults instantiates a new SuccessfulAdminIdentitySession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuccessfulAdminIdentitySessionWithDefaults() *SuccessfulAdminIdentitySession {
	this := SuccessfulAdminIdentitySession{}
	return &this
}

// GetIdentity returns the Identity field value
func (o *SuccessfulAdminIdentitySession) GetIdentity() Identity {
	if o == nil {
		var ret Identity
		return ret
	}

	return o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value
// and a boolean to check if the value has been set.
func (o *SuccessfulAdminIdentitySession) GetIdentityOk() (*Identity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identity, true
}

// SetIdentity sets field value
func (o *SuccessfulAdminIdentitySession) SetIdentity(v Identity) {
	o.Identity = v
}

// GetSession returns the Session field value
func (o *SuccessfulAdminIdentitySession) GetSession() Session {
	if o == nil {
		var ret Session
		return ret
	}

	return o.Session
}

// GetSessionOk returns a tuple with the Session field value
// and a boolean to check if the value has been set.
func (o *SuccessfulAdminIdentitySession) GetSessionOk() (*Session, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Session, true
}

// SetSession sets field value
func (o *SuccessfulAdminIdentitySession) SetSession(v Session) {
	o.Session = v
}

// GetSessionToken returns the SessionToken field value if set, zero value otherwise.
func (o *SuccessfulAdminIdentitySession) GetSessionToken() string {
	if o == nil || o.SessionToken == nil {
		var ret string
		return ret
	}
	return *o.SessionToken
}

// GetSessionTokenOk returns a tuple with the SessionToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessfulAdminIdentitySession) GetSessionTokenOk() (*string, bool) {
	if o == nil || o.SessionToken == nil {
		return nil, false
	}
	return o.SessionToken, true
}

// HasSessionToken returns a boolean if a field has been set.
func (o *SuccessfulAdminIdentitySession) HasSessionToken() bool {
	if o != nil && o.SessionToken != nil {
		return true
	}

	return false
}

// SetSessionToken gets a reference to the given string and assigns it to the SessionToken field.
func (o *SuccessfulAdminIdentitySession) SetSessionToken(v string) {
	o.SessionToken = &v
}

func (o SuccessfulAdminIdentitySession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["identity"] = o.Identity
	}
	if true {
		toSerialize["session"] = o.Session
	}
	if o.SessionToken != nil {
		toSerialize["session_token"] = o.SessionToken
	}
	return json.Marshal(toSerialize)
}

type NullableSuccessfulAdminIdentitySession struct {
	value *SuccessfulAdminIdentitySession
	isSet bool
}

func (v NullableSuccessfulAdminIdentitySession) Get() *SuccessfulAdminIdentitySession {
	return v.value
}

func (v *NullableSuccessfulAdminIdentitySession) Set(val *SuccessfulAdminIdentitySession) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccessfulAdminIdentitySession) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccessfulAdminIdentitySession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccessfulAdminIdentitySession(val *SuccessfulAdminIdentitySession) *NullableSuccessfulAdminIdentitySession {
	return &NullableSuccessfulAdminIdentitySession{value: val, isSet: true}
}

func (v NullableSuccessfulAdminIdentitySession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccessfulAdminIdentitySession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
