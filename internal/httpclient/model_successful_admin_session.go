/*
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests.
 *
 * API version: 1.0.0
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SuccessfulAdminSession struct for SuccessfulAdminSession
type SuccessfulAdminSession struct {
	Session Session `json:"session"`
}

// NewSuccessfulAdminSession instantiates a new SuccessfulAdminSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuccessfulAdminSession(session Session) *SuccessfulAdminSession {
	this := SuccessfulAdminSession{}
	this.Session = session
	return &this
}

// NewSuccessfulAdminSessionWithDefaults instantiates a new SuccessfulAdminSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuccessfulAdminSessionWithDefaults() *SuccessfulAdminSession {
	this := SuccessfulAdminSession{}
	return &this
}

// GetSession returns the Session field value
func (o *SuccessfulAdminSession) GetSession() Session {
	if o == nil {
		var ret Session
		return ret
	}

	return o.Session
}

// GetSessionOk returns a tuple with the Session field value
// and a boolean to check if the value has been set.
func (o *SuccessfulAdminSession) GetSessionOk() (*Session, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Session, true
}

// SetSession sets field value
func (o *SuccessfulAdminSession) SetSession(v Session) {
	o.Session = v
}

func (o SuccessfulAdminSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["session"] = o.Session
	}
	return json.Marshal(toSerialize)
}

type NullableSuccessfulAdminSession struct {
	value *SuccessfulAdminSession
	isSet bool
}

func (v NullableSuccessfulAdminSession) Get() *SuccessfulAdminSession {
	return v.value
}

func (v *NullableSuccessfulAdminSession) Set(val *SuccessfulAdminSession) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccessfulAdminSession) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccessfulAdminSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccessfulAdminSession(val *SuccessfulAdminSession) *NullableSuccessfulAdminSession {
	return &NullableSuccessfulAdminSession{value: val, isSet: true}
}

func (v NullableSuccessfulAdminSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccessfulAdminSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
